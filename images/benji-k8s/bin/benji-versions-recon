#!/usr/bin/env python3
import argparse
import logging
import sys

import kubernetes

import benji.helpers.kubernetes
import benji.helpers.settings as settings
import benji.helpers.utils as utils

utils.setup_logging()
logger = logging.getLogger()

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, allow_abbrev=False)

args = parser.parse_args()

benji.helpers.kubernetes.load_config()
core_v1_api = kubernetes.client.CoreV1Api()

logger.info(f'Reconciling state of versions between Benji and Kubernetes.')

benji_ls = utils.subprocess_run(['benji', '--machine-output', '--log-level', settings.benji_log_level, 'ls'],
                                decode_json=True)
assert isinstance(benji_ls, dict)
assert 'versions' in benji_ls
assert isinstance(benji_ls['versions'], list)

for version in benji_ls['versions']:
    labels = {}
    for label in version['labels']:
        labels[label['name']] = label['value']

    if 'benji-backup.me/k8s-pvc-namespace' not in labels:
        logger.warning(f'Version {utils.version_string(version["uid"])} is missing label with name benji-backup.me/k8s-pvc-namespace.')
        continue

    pvc_namespace = labels['benji-backup.me/k8s-pvc-namespace']

    benji.update_version_resource(version, pvc_namespace)

sys.exit(0)
